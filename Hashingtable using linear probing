#include<stdio.h>
#include<stdlib.h>
 
/* to store a data (consisting of key and value) in hash table array */
struct item 
{
    int key;
    int value;
};
 
/* each hash table item has a flag (status) and data (consisting of key and value) */
struct hashtable_item 
{
 
    int flag;
    /*
     * flag = 0 : data does not exist
     * flag = 1 : data exists
     * flag = 2 : data existed at least once
    */
 
    struct item *data;
 
};
 
struct hashtable_item *array;
int size = 0;
int max = 10;
 
/* initializing hash table array */
void init_array()
{
    int i;
    for (i = 0; i < max; i++) 
    {
	array[i].flag = 0;
	array[i].data = NULL;
    }
}
 
/* to every key, it will generate a corresponding index */
int hashcode(int key)
{
    return (key % max);
}
 
/* to insert an element in the hash table */
void insert(int key, int value)
{
    int index = hashcode(key);
    int i = index;
 
    /* creating new item to insert in the hash table array */
    struct item *new_item = (struct item*) malloc(sizeof(struct item));
    new_item->key = key;
    new_item->value = value;
 
    /* probing through the array until we reach an empty space */
    while (array[i].flag == 1) 
    {
 
	if (array[i].data->key == key) 
        {
 
		/* case where already existing key matches the given key */
		printf("\n Key already exists, hence updating its value \n");
		array[i].data->value = value;
		return;
 
	}
 
	i = (i + 1) % max;
	if (i == index) 
        {
		printf("\n Hash table is full, cannot insert any more item \n");
		return;
	}
 
    }
 
    array[i].flag = 1;
    array[i].data = new_item;
    size++;
    printf("\n Key (%d) has been inserted \n", key);
 
} 
 
 
/* to remove an element from the hash table */
void remove_element(int key)
{
    int index = hashcode(key);
    int  i = index;
 
    /* probing through array until we reach an empty space where not even once an element had been present */
    while (array[i].flag != 0) 
    {
 
	if (array[i].flag == 1  &&  array[i].data->key == key ) 
        {
 
		// case when data key matches the given key
		array[i].flag =  2;
		array[i].data = NULL;
		size--;
		printf("\n Key (%d) has been removed \n", key);
		return;
 
	}
